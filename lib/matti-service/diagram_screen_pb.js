/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AddCpuToDiagramScreenRequest', null, global);
goog.exportSymbol('proto.AddCpuToDiagramScreenResponse', null, global);
goog.exportSymbol('proto.CreateDiagramScreenRequest', null, global);
goog.exportSymbol('proto.CreateDiagramScreenResponse', null, global);
goog.exportSymbol('proto.DiagramScreen', null, global);
goog.exportSymbol('proto.EditDiagramScreenRequest', null, global);
goog.exportSymbol('proto.EditDiagramScreenResponse', null, global);
goog.exportSymbol('proto.FetchDiagramScreenByIdRequest', null, global);
goog.exportSymbol('proto.FetchDiagramScreenByIdResponse', null, global);
goog.exportSymbol('proto.FetchDiagramScreenBySlugRequest', null, global);
goog.exportSymbol('proto.FetchDiagramScreenBySlugResponse', null, global);
goog.exportSymbol('proto.FetchDiagramScreensRequest', null, global);
goog.exportSymbol('proto.RemoveCpuFromDiagramScreenRequest', null, global);
goog.exportSymbol('proto.RemoveCpuFromDiagramScreenResponse', null, global);
goog.exportSymbol('proto.RemoveDiagramScreenRequest', null, global);
goog.exportSymbol('proto.RemoveDiagramScreenResonse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DiagramScreen = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DiagramScreen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DiagramScreen.displayName = 'proto.DiagramScreen';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DiagramScreen.prototype.toObject = function(opt_includeInstance) {
  return proto.DiagramScreen.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DiagramScreen} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DiagramScreen.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    diagramid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    matrixid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    conportid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DiagramScreen}
 */
proto.DiagramScreen.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DiagramScreen;
  return proto.DiagramScreen.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DiagramScreen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DiagramScreen}
 */
proto.DiagramScreen.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatrixid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DiagramScreen.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DiagramScreen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DiagramScreen} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DiagramScreen.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDiagramid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMatrixid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getConportid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.DiagramScreen.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.DiagramScreen.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.DiagramScreen.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DiagramScreen.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 diagramId = 3;
 * @return {number}
 */
proto.DiagramScreen.prototype.getDiagramid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DiagramScreen.prototype.setDiagramid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 matrixId = 4;
 * @return {number}
 */
proto.DiagramScreen.prototype.getMatrixid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.DiagramScreen.prototype.setMatrixid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 conPortId = 5;
 * @return {number}
 */
proto.DiagramScreen.prototype.getConportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.DiagramScreen.prototype.setConportid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FetchDiagramScreensRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FetchDiagramScreensRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FetchDiagramScreensRequest.displayName = 'proto.FetchDiagramScreensRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FetchDiagramScreensRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FetchDiagramScreensRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FetchDiagramScreensRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FetchDiagramScreensRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FetchDiagramScreensRequest}
 */
proto.FetchDiagramScreensRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FetchDiagramScreensRequest;
  return proto.FetchDiagramScreensRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FetchDiagramScreensRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FetchDiagramScreensRequest}
 */
proto.FetchDiagramScreensRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FetchDiagramScreensRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FetchDiagramScreensRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FetchDiagramScreensRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FetchDiagramScreensRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 offset = 1;
 * @return {number}
 */
proto.FetchDiagramScreensRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.FetchDiagramScreensRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.FetchDiagramScreensRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.FetchDiagramScreensRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FetchDiagramScreenByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FetchDiagramScreenByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FetchDiagramScreenByIdRequest.displayName = 'proto.FetchDiagramScreenByIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FetchDiagramScreenByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FetchDiagramScreenByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FetchDiagramScreenByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FetchDiagramScreenByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreenid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FetchDiagramScreenByIdRequest}
 */
proto.FetchDiagramScreenByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FetchDiagramScreenByIdRequest;
  return proto.FetchDiagramScreenByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FetchDiagramScreenByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FetchDiagramScreenByIdRequest}
 */
proto.FetchDiagramScreenByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramscreenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FetchDiagramScreenByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FetchDiagramScreenByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FetchDiagramScreenByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FetchDiagramScreenByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreenid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 diagramScreenId = 1;
 * @return {number}
 */
proto.FetchDiagramScreenByIdRequest.prototype.getDiagramscreenid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.FetchDiagramScreenByIdRequest.prototype.setDiagramscreenid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FetchDiagramScreenByIdResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FetchDiagramScreenByIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FetchDiagramScreenByIdResponse.displayName = 'proto.FetchDiagramScreenByIdResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FetchDiagramScreenByIdResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FetchDiagramScreenByIdResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FetchDiagramScreenByIdResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FetchDiagramScreenByIdResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreen: (f = msg.getDiagramscreen()) && proto.DiagramScreen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FetchDiagramScreenByIdResponse}
 */
proto.FetchDiagramScreenByIdResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FetchDiagramScreenByIdResponse;
  return proto.FetchDiagramScreenByIdResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FetchDiagramScreenByIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FetchDiagramScreenByIdResponse}
 */
proto.FetchDiagramScreenByIdResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DiagramScreen;
      reader.readMessage(value,proto.DiagramScreen.deserializeBinaryFromReader);
      msg.setDiagramscreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FetchDiagramScreenByIdResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FetchDiagramScreenByIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FetchDiagramScreenByIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FetchDiagramScreenByIdResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DiagramScreen.serializeBinaryToWriter
    );
  }
};


/**
 * optional DiagramScreen diagramScreen = 1;
 * @return {?proto.DiagramScreen}
 */
proto.FetchDiagramScreenByIdResponse.prototype.getDiagramscreen = function() {
  return /** @type{?proto.DiagramScreen} */ (
    jspb.Message.getWrapperField(this, proto.DiagramScreen, 1));
};


/** @param {?proto.DiagramScreen|undefined} value */
proto.FetchDiagramScreenByIdResponse.prototype.setDiagramscreen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.FetchDiagramScreenByIdResponse.prototype.clearDiagramscreen = function() {
  this.setDiagramscreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FetchDiagramScreenByIdResponse.prototype.hasDiagramscreen = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FetchDiagramScreenBySlugRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FetchDiagramScreenBySlugRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FetchDiagramScreenBySlugRequest.displayName = 'proto.FetchDiagramScreenBySlugRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FetchDiagramScreenBySlugRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FetchDiagramScreenBySlugRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FetchDiagramScreenBySlugRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FetchDiagramScreenBySlugRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    slug: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FetchDiagramScreenBySlugRequest}
 */
proto.FetchDiagramScreenBySlugRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FetchDiagramScreenBySlugRequest;
  return proto.FetchDiagramScreenBySlugRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FetchDiagramScreenBySlugRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FetchDiagramScreenBySlugRequest}
 */
proto.FetchDiagramScreenBySlugRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FetchDiagramScreenBySlugRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FetchDiagramScreenBySlugRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FetchDiagramScreenBySlugRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FetchDiagramScreenBySlugRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string slug = 1;
 * @return {string}
 */
proto.FetchDiagramScreenBySlugRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FetchDiagramScreenBySlugRequest.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FetchDiagramScreenBySlugResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FetchDiagramScreenBySlugResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FetchDiagramScreenBySlugResponse.displayName = 'proto.FetchDiagramScreenBySlugResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FetchDiagramScreenBySlugResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FetchDiagramScreenBySlugResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FetchDiagramScreenBySlugResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FetchDiagramScreenBySlugResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreen: (f = msg.getDiagramscreen()) && proto.DiagramScreen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FetchDiagramScreenBySlugResponse}
 */
proto.FetchDiagramScreenBySlugResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FetchDiagramScreenBySlugResponse;
  return proto.FetchDiagramScreenBySlugResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FetchDiagramScreenBySlugResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FetchDiagramScreenBySlugResponse}
 */
proto.FetchDiagramScreenBySlugResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DiagramScreen;
      reader.readMessage(value,proto.DiagramScreen.deserializeBinaryFromReader);
      msg.setDiagramscreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FetchDiagramScreenBySlugResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FetchDiagramScreenBySlugResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FetchDiagramScreenBySlugResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FetchDiagramScreenBySlugResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DiagramScreen.serializeBinaryToWriter
    );
  }
};


/**
 * optional DiagramScreen diagramScreen = 1;
 * @return {?proto.DiagramScreen}
 */
proto.FetchDiagramScreenBySlugResponse.prototype.getDiagramscreen = function() {
  return /** @type{?proto.DiagramScreen} */ (
    jspb.Message.getWrapperField(this, proto.DiagramScreen, 1));
};


/** @param {?proto.DiagramScreen|undefined} value */
proto.FetchDiagramScreenBySlugResponse.prototype.setDiagramscreen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.FetchDiagramScreenBySlugResponse.prototype.clearDiagramscreen = function() {
  this.setDiagramscreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FetchDiagramScreenBySlugResponse.prototype.hasDiagramscreen = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateDiagramScreenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateDiagramScreenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateDiagramScreenRequest.displayName = 'proto.CreateDiagramScreenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateDiagramScreenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateDiagramScreenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateDiagramScreenRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CreateDiagramScreenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    conportid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    matrixid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateDiagramScreenRequest}
 */
proto.CreateDiagramScreenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateDiagramScreenRequest;
  return proto.CreateDiagramScreenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateDiagramScreenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateDiagramScreenRequest}
 */
proto.CreateDiagramScreenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConportid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatrixid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateDiagramScreenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateDiagramScreenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateDiagramScreenRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CreateDiagramScreenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConportid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMatrixid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 diagramId = 1;
 * @return {number}
 */
proto.CreateDiagramScreenRequest.prototype.getDiagramid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.CreateDiagramScreenRequest.prototype.setDiagramid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.CreateDiagramScreenRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CreateDiagramScreenRequest.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 conPortId = 3;
 * @return {number}
 */
proto.CreateDiagramScreenRequest.prototype.getConportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.CreateDiagramScreenRequest.prototype.setConportid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 matrixId = 4;
 * @return {number}
 */
proto.CreateDiagramScreenRequest.prototype.getMatrixid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.CreateDiagramScreenRequest.prototype.setMatrixid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateDiagramScreenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateDiagramScreenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateDiagramScreenResponse.displayName = 'proto.CreateDiagramScreenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateDiagramScreenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateDiagramScreenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateDiagramScreenResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CreateDiagramScreenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreen: (f = msg.getDiagramscreen()) && proto.DiagramScreen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateDiagramScreenResponse}
 */
proto.CreateDiagramScreenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateDiagramScreenResponse;
  return proto.CreateDiagramScreenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateDiagramScreenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateDiagramScreenResponse}
 */
proto.CreateDiagramScreenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DiagramScreen;
      reader.readMessage(value,proto.DiagramScreen.deserializeBinaryFromReader);
      msg.setDiagramscreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateDiagramScreenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateDiagramScreenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateDiagramScreenResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CreateDiagramScreenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DiagramScreen.serializeBinaryToWriter
    );
  }
};


/**
 * optional DiagramScreen diagramScreen = 1;
 * @return {?proto.DiagramScreen}
 */
proto.CreateDiagramScreenResponse.prototype.getDiagramscreen = function() {
  return /** @type{?proto.DiagramScreen} */ (
    jspb.Message.getWrapperField(this, proto.DiagramScreen, 1));
};


/** @param {?proto.DiagramScreen|undefined} value */
proto.CreateDiagramScreenResponse.prototype.setDiagramscreen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CreateDiagramScreenResponse.prototype.clearDiagramscreen = function() {
  this.setDiagramscreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CreateDiagramScreenResponse.prototype.hasDiagramscreen = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveDiagramScreenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveDiagramScreenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveDiagramScreenRequest.displayName = 'proto.RemoveDiagramScreenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveDiagramScreenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveDiagramScreenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveDiagramScreenRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RemoveDiagramScreenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreenid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveDiagramScreenRequest}
 */
proto.RemoveDiagramScreenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveDiagramScreenRequest;
  return proto.RemoveDiagramScreenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveDiagramScreenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveDiagramScreenRequest}
 */
proto.RemoveDiagramScreenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramscreenid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveDiagramScreenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemoveDiagramScreenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemoveDiagramScreenRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemoveDiagramScreenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreenid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 diagramScreenId = 1;
 * @return {number}
 */
proto.RemoveDiagramScreenRequest.prototype.getDiagramscreenid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RemoveDiagramScreenRequest.prototype.setDiagramscreenid = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveDiagramScreenResonse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveDiagramScreenResonse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveDiagramScreenResonse.displayName = 'proto.RemoveDiagramScreenResonse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveDiagramScreenResonse.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveDiagramScreenResonse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveDiagramScreenResonse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RemoveDiagramScreenResonse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveDiagramScreenResonse}
 */
proto.RemoveDiagramScreenResonse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveDiagramScreenResonse;
  return proto.RemoveDiagramScreenResonse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveDiagramScreenResonse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveDiagramScreenResonse}
 */
proto.RemoveDiagramScreenResonse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveDiagramScreenResonse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemoveDiagramScreenResonse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemoveDiagramScreenResonse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemoveDiagramScreenResonse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EditDiagramScreenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EditDiagramScreenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EditDiagramScreenRequest.displayName = 'proto.EditDiagramScreenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EditDiagramScreenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.EditDiagramScreenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EditDiagramScreenRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EditDiagramScreenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    slug: jspb.Message.getFieldWithDefault(msg, 2, ""),
    conportid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    matrixid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EditDiagramScreenRequest}
 */
proto.EditDiagramScreenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EditDiagramScreenRequest;
  return proto.EditDiagramScreenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EditDiagramScreenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EditDiagramScreenRequest}
 */
proto.EditDiagramScreenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConportid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMatrixid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EditDiagramScreenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EditDiagramScreenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EditDiagramScreenRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EditDiagramScreenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConportid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMatrixid();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.EditDiagramScreenRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.EditDiagramScreenRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.EditDiagramScreenRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.EditDiagramScreenRequest.prototype.setSlug = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 conPortId = 3;
 * @return {number}
 */
proto.EditDiagramScreenRequest.prototype.getConportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.EditDiagramScreenRequest.prototype.setConportid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 matrixId = 4;
 * @return {number}
 */
proto.EditDiagramScreenRequest.prototype.getMatrixid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.EditDiagramScreenRequest.prototype.setMatrixid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EditDiagramScreenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EditDiagramScreenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EditDiagramScreenResponse.displayName = 'proto.EditDiagramScreenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EditDiagramScreenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.EditDiagramScreenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EditDiagramScreenResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.EditDiagramScreenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreen: (f = msg.getDiagramscreen()) && proto.DiagramScreen.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EditDiagramScreenResponse}
 */
proto.EditDiagramScreenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EditDiagramScreenResponse;
  return proto.EditDiagramScreenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EditDiagramScreenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EditDiagramScreenResponse}
 */
proto.EditDiagramScreenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.DiagramScreen;
      reader.readMessage(value,proto.DiagramScreen.deserializeBinaryFromReader);
      msg.setDiagramscreen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EditDiagramScreenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EditDiagramScreenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EditDiagramScreenResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.EditDiagramScreenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreen();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.DiagramScreen.serializeBinaryToWriter
    );
  }
};


/**
 * optional DiagramScreen diagramScreen = 1;
 * @return {?proto.DiagramScreen}
 */
proto.EditDiagramScreenResponse.prototype.getDiagramscreen = function() {
  return /** @type{?proto.DiagramScreen} */ (
    jspb.Message.getWrapperField(this, proto.DiagramScreen, 1));
};


/** @param {?proto.DiagramScreen|undefined} value */
proto.EditDiagramScreenResponse.prototype.setDiagramscreen = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.EditDiagramScreenResponse.prototype.clearDiagramscreen = function() {
  this.setDiagramscreen(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.EditDiagramScreenResponse.prototype.hasDiagramscreen = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddCpuToDiagramScreenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddCpuToDiagramScreenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddCpuToDiagramScreenRequest.displayName = 'proto.AddCpuToDiagramScreenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddCpuToDiagramScreenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AddCpuToDiagramScreenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddCpuToDiagramScreenRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AddCpuToDiagramScreenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreenid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cpuportid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddCpuToDiagramScreenRequest}
 */
proto.AddCpuToDiagramScreenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddCpuToDiagramScreenRequest;
  return proto.AddCpuToDiagramScreenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddCpuToDiagramScreenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddCpuToDiagramScreenRequest}
 */
proto.AddCpuToDiagramScreenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramscreenid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpuportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddCpuToDiagramScreenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddCpuToDiagramScreenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddCpuToDiagramScreenRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.AddCpuToDiagramScreenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreenid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCpuportid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 diagramScreenId = 1;
 * @return {number}
 */
proto.AddCpuToDiagramScreenRequest.prototype.getDiagramscreenid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AddCpuToDiagramScreenRequest.prototype.setDiagramscreenid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 cpuPortId = 2;
 * @return {number}
 */
proto.AddCpuToDiagramScreenRequest.prototype.getCpuportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AddCpuToDiagramScreenRequest.prototype.setCpuportid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AddCpuToDiagramScreenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AddCpuToDiagramScreenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AddCpuToDiagramScreenResponse.displayName = 'proto.AddCpuToDiagramScreenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AddCpuToDiagramScreenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AddCpuToDiagramScreenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AddCpuToDiagramScreenResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.AddCpuToDiagramScreenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AddCpuToDiagramScreenResponse}
 */
proto.AddCpuToDiagramScreenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AddCpuToDiagramScreenResponse;
  return proto.AddCpuToDiagramScreenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AddCpuToDiagramScreenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AddCpuToDiagramScreenResponse}
 */
proto.AddCpuToDiagramScreenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AddCpuToDiagramScreenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AddCpuToDiagramScreenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AddCpuToDiagramScreenResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.AddCpuToDiagramScreenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveCpuFromDiagramScreenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveCpuFromDiagramScreenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveCpuFromDiagramScreenRequest.displayName = 'proto.RemoveCpuFromDiagramScreenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveCpuFromDiagramScreenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveCpuFromDiagramScreenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveCpuFromDiagramScreenRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RemoveCpuFromDiagramScreenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    diagramscreenid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cpuportid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveCpuFromDiagramScreenRequest}
 */
proto.RemoveCpuFromDiagramScreenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveCpuFromDiagramScreenRequest;
  return proto.RemoveCpuFromDiagramScreenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveCpuFromDiagramScreenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveCpuFromDiagramScreenRequest}
 */
proto.RemoveCpuFromDiagramScreenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDiagramscreenid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCpuportid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveCpuFromDiagramScreenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemoveCpuFromDiagramScreenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemoveCpuFromDiagramScreenRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemoveCpuFromDiagramScreenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiagramscreenid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCpuportid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 diagramScreenId = 1;
 * @return {number}
 */
proto.RemoveCpuFromDiagramScreenRequest.prototype.getDiagramscreenid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RemoveCpuFromDiagramScreenRequest.prototype.setDiagramscreenid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 cpuPortId = 2;
 * @return {number}
 */
proto.RemoveCpuFromDiagramScreenRequest.prototype.getCpuportid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.RemoveCpuFromDiagramScreenRequest.prototype.setCpuportid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RemoveCpuFromDiagramScreenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RemoveCpuFromDiagramScreenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RemoveCpuFromDiagramScreenResponse.displayName = 'proto.RemoveCpuFromDiagramScreenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RemoveCpuFromDiagramScreenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.RemoveCpuFromDiagramScreenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RemoveCpuFromDiagramScreenResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RemoveCpuFromDiagramScreenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RemoveCpuFromDiagramScreenResponse}
 */
proto.RemoveCpuFromDiagramScreenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RemoveCpuFromDiagramScreenResponse;
  return proto.RemoveCpuFromDiagramScreenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RemoveCpuFromDiagramScreenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RemoveCpuFromDiagramScreenResponse}
 */
proto.RemoveCpuFromDiagramScreenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RemoveCpuFromDiagramScreenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RemoveCpuFromDiagramScreenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RemoveCpuFromDiagramScreenResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RemoveCpuFromDiagramScreenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto);
